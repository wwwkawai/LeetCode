Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto a:nums)
        {
            sum+=a;
        }
        if(sum%2!=0)
            return false;
        vector<int> dp(sum+1,0);
        dp[0]=1;
        for(int i=0;i<nums.size();i++)
        {
            for(int j=sum;j>=0;j--)
            {
                if(dp[j]&&j+nums[i]<=sum)
                    dp[j+nums[i]]=1;
            }
        }
        return dp[sum/2];
    }
};
/*
we need to find if there are some numbers' sum equal to the half of the sum of the whole array
use dp[j] to record if we can manage to get sum j, so, if dp[j-nums[i]] then dp[j+nums[i]] = 1
after the loop, we can get the answer dp[sum/2].
*/
