Given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.
You can attend an event i at any day d where startTimei <= d <= endTimei. Notice that you can only attend one event at any time d.
Return the maximum number of events you can attend.
class Solution {
public:
    int maxEvents(vector<vector<int>>& events) {
        priority_queue<int,vector<int>,greater<int>> que;
        int mi=INT_MAX,mx=INT_MIN;
        for(int i=0;i<events.size();i++){
            mi=min(mi,events[i][0]);
            mx=max(mx,events[i][1]);
        }
        sort(events.begin(),events.end(),[&](vector<int> a,vector<int> b){
            if(a[0]==b[0])
               return a[1]<b[1];
            return a[0]<b[0];
        });
        int res=0;
        int j=0;
        for(int i=mi;i<=mx;i++){
            while(j<events.size()&&events[j][0]<=i){
                que.push(events[j][1]);
                j++;
            }
            while(!que.empty()&&que.top()<i){
                que.pop();
            }
            if(!que.empty()){
                res++;
                que.pop();
            }
        }
        return res;
    }
};
/*first, we sort the events by their start time,then we maintain a priority queue which sorts the events by their end time, last, we just list every day i and push the events'end time which start time smaller than i in to the queue, and pop the events which end time smaller than i. if the queue is not empty we just have a meeting which end time is the earliest, and pop it.in a word, we just find all the meetings which are already have started,and choose one has the earliest end time to take part in.*/
