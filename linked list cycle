Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast&&fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(fast==slow)
                break;
        }
        if(!fast||!fast->next)
            return NULL;
        auto ans=head;
        while(ans!=slow)
        {
            slow=slow->next;
            ans=ans->next;
        }
        return ans;
    }
};
/*
Using two pointers called slow and fast, slow moves one step every time, while fast moves two steps. So, if there is no cycle, the fast will be NULL. On the contary, slow will finally catch fast in the cycle, and now the distance between head and the entrance of the cycle is the same as the distance between slow and the entrance. Therefore, we use a pointer point to head, and move it and slow together to get the answer.
*/
