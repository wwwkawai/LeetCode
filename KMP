using KMP find all the subsequencese in s which equal to pattern,return the position they appeal. 
class Solution {
public:
    vector<int> next(string s){
        vector <int> dp(s.size());
        dp[0]=-1;
        int i=-1,j=0;
        while(j<s.size()) {
            while (i == -1 || s[i] == s[j]) {
                dp[++j] = ++i;
            }
            i = dp[i];
        }
        return dp;
    }
    vector<int> KMP(string s,string pattern){
        vector <int> dp=next(pattern);
        vector <int> ans;
        int i=0,j=0,n1=s.size(),n2=pattern.size();
        for(;i<n1;i++){
            while(j>0&&pattern[j]!=s[i]){
                j=dp[j];
            }
            if(pattern[j]==s[i]){
                j++;
            }
            if(j==n2){
                ans.push_back(i-j+1);
                i=i-j+1;
                j=0;
            }
        }
        return ans;
    }
};
