Sort a linked list in O(n log n) time using constant space complexity.
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head||!head->next)
            return head;
        ListNode *fast=head->next;
        ListNode *slow=head;
        while(fast&&fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        fast=slow->next;
        slow->next=NULL;
        return merge(sortList(head),sortList(fast));
    }
    ListNode* merge(ListNode* l1,ListNode* l2)
    {
        ListNode* head=NULL;
        ListNode* p;
        while(l1&&l2)
        {
            if(l1->val>l2->val)
            {
                if(!head)
                {
                    head=l2;
                    p=head;
                }
                else
                {
                    p->next=l2;
                    p=l2;
                }
                l2=l2->next;
            }
            else
            {
                if(!head)
                {
                    head=l1;
                    p=head;
                }
                else
                {
                    p->next=l1;
                    p=l1;
                }
                l1=l1->next;
            }
        }
        if(l1)
            p->next=l1;
        else if(l2)
            p->next=l2;
        return head;
    }
};
/*we recursively divide the list into two parts, and merge two lists from botton to up to get the list sorted*/
